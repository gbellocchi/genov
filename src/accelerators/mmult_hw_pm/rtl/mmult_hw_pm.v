// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_hw_pm,hls_ip_2019_2_AR72614,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.167000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=237,HLS_SYN_LUT=1265,HLS_VERSION=2019_2_AR72614}" *)

module mmult_hw_pm (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_0_TDATA,
        in1_0_TVALID,
        in1_0_TREADY,
        in1_1_TDATA,
        in1_1_TVALID,
        in1_1_TREADY,
        in1_2_TDATA,
        in1_2_TVALID,
        in1_2_TREADY,
        in1_3_TDATA,
        in1_3_TVALID,
        in1_3_TREADY,
        in1_4_TDATA,
        in1_4_TVALID,
        in1_4_TREADY,
        in1_5_TDATA,
        in1_5_TVALID,
        in1_5_TREADY,
        in1_6_TDATA,
        in1_6_TVALID,
        in1_6_TREADY,
        in1_7_TDATA,
        in1_7_TVALID,
        in1_7_TREADY,
        in1_8_TDATA,
        in1_8_TVALID,
        in1_8_TREADY,
        in1_9_TDATA,
        in1_9_TVALID,
        in1_9_TREADY,
        in1_10_TDATA,
        in1_10_TVALID,
        in1_10_TREADY,
        in1_11_TDATA,
        in1_11_TVALID,
        in1_11_TREADY,
        in1_12_TDATA,
        in1_12_TVALID,
        in1_12_TREADY,
        in1_13_TDATA,
        in1_13_TVALID,
        in1_13_TREADY,
        in1_14_TDATA,
        in1_14_TVALID,
        in1_14_TREADY,
        in1_15_TDATA,
        in1_15_TVALID,
        in1_15_TREADY,
        in2_0_TDATA,
        in2_0_TVALID,
        in2_0_TREADY,
        in2_1_TDATA,
        in2_1_TVALID,
        in2_1_TREADY,
        in2_2_TDATA,
        in2_2_TVALID,
        in2_2_TREADY,
        in2_3_TDATA,
        in2_3_TVALID,
        in2_3_TREADY,
        in2_4_TDATA,
        in2_4_TVALID,
        in2_4_TREADY,
        in2_5_TDATA,
        in2_5_TVALID,
        in2_5_TREADY,
        in2_6_TDATA,
        in2_6_TVALID,
        in2_6_TREADY,
        in2_7_TDATA,
        in2_7_TVALID,
        in2_7_TREADY,
        in2_8_TDATA,
        in2_8_TVALID,
        in2_8_TREADY,
        in2_9_TDATA,
        in2_9_TVALID,
        in2_9_TREADY,
        in2_10_TDATA,
        in2_10_TVALID,
        in2_10_TREADY,
        in2_11_TDATA,
        in2_11_TVALID,
        in2_11_TREADY,
        in2_12_TDATA,
        in2_12_TVALID,
        in2_12_TREADY,
        in2_13_TDATA,
        in2_13_TVALID,
        in2_13_TREADY,
        in2_14_TDATA,
        in2_14_TVALID,
        in2_14_TREADY,
        in2_15_TDATA,
        in2_15_TVALID,
        in2_15_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1_0_TDATA;
input   in1_0_TVALID;
output   in1_0_TREADY;
input  [31:0] in1_1_TDATA;
input   in1_1_TVALID;
output   in1_1_TREADY;
input  [31:0] in1_2_TDATA;
input   in1_2_TVALID;
output   in1_2_TREADY;
input  [31:0] in1_3_TDATA;
input   in1_3_TVALID;
output   in1_3_TREADY;
input  [31:0] in1_4_TDATA;
input   in1_4_TVALID;
output   in1_4_TREADY;
input  [31:0] in1_5_TDATA;
input   in1_5_TVALID;
output   in1_5_TREADY;
input  [31:0] in1_6_TDATA;
input   in1_6_TVALID;
output   in1_6_TREADY;
input  [31:0] in1_7_TDATA;
input   in1_7_TVALID;
output   in1_7_TREADY;
input  [31:0] in1_8_TDATA;
input   in1_8_TVALID;
output   in1_8_TREADY;
input  [31:0] in1_9_TDATA;
input   in1_9_TVALID;
output   in1_9_TREADY;
input  [31:0] in1_10_TDATA;
input   in1_10_TVALID;
output   in1_10_TREADY;
input  [31:0] in1_11_TDATA;
input   in1_11_TVALID;
output   in1_11_TREADY;
input  [31:0] in1_12_TDATA;
input   in1_12_TVALID;
output   in1_12_TREADY;
input  [31:0] in1_13_TDATA;
input   in1_13_TVALID;
output   in1_13_TREADY;
input  [31:0] in1_14_TDATA;
input   in1_14_TVALID;
output   in1_14_TREADY;
input  [31:0] in1_15_TDATA;
input   in1_15_TVALID;
output   in1_15_TREADY;
input  [31:0] in2_0_TDATA;
input   in2_0_TVALID;
output   in2_0_TREADY;
input  [31:0] in2_1_TDATA;
input   in2_1_TVALID;
output   in2_1_TREADY;
input  [31:0] in2_2_TDATA;
input   in2_2_TVALID;
output   in2_2_TREADY;
input  [31:0] in2_3_TDATA;
input   in2_3_TVALID;
output   in2_3_TREADY;
input  [31:0] in2_4_TDATA;
input   in2_4_TVALID;
output   in2_4_TREADY;
input  [31:0] in2_5_TDATA;
input   in2_5_TVALID;
output   in2_5_TREADY;
input  [31:0] in2_6_TDATA;
input   in2_6_TVALID;
output   in2_6_TREADY;
input  [31:0] in2_7_TDATA;
input   in2_7_TVALID;
output   in2_7_TREADY;
input  [31:0] in2_8_TDATA;
input   in2_8_TVALID;
output   in2_8_TREADY;
input  [31:0] in2_9_TDATA;
input   in2_9_TVALID;
output   in2_9_TREADY;
input  [31:0] in2_10_TDATA;
input   in2_10_TVALID;
output   in2_10_TREADY;
input  [31:0] in2_11_TDATA;
input   in2_11_TVALID;
output   in2_11_TREADY;
input  [31:0] in2_12_TDATA;
input   in2_12_TVALID;
output   in2_12_TREADY;
input  [31:0] in2_13_TDATA;
input   in2_13_TVALID;
output   in2_13_TREADY;
input  [31:0] in2_14_TDATA;
input   in2_14_TVALID;
output   in2_14_TREADY;
input  [31:0] in2_15_TDATA;
input   in2_15_TVALID;
output   in2_15_TREADY;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_0_TREADY;
reg in1_1_TREADY;
reg in1_2_TREADY;
reg in1_3_TREADY;
reg in1_4_TREADY;
reg in1_5_TREADY;
reg in1_6_TREADY;
reg in1_7_TREADY;
reg in1_8_TREADY;
reg in1_9_TREADY;
reg in1_10_TREADY;
reg in1_11_TREADY;
reg in1_12_TREADY;
reg in1_13_TREADY;
reg in1_14_TREADY;
reg in1_15_TREADY;
reg in2_0_TREADY;
reg in2_1_TREADY;
reg in2_2_TREADY;
reg in2_3_TREADY;
reg in2_4_TREADY;
reg in2_5_TREADY;
reg in2_6_TREADY;
reg in2_7_TREADY;
reg in2_8_TREADY;
reg in2_9_TREADY;
reg in2_10_TREADY;
reg in2_11_TREADY;
reg in2_12_TREADY;
reg in2_13_TREADY;
reg in2_14_TREADY;
reg in2_15_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_0_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln125_fu_333_p2;
reg    in1_1_TDATA_blk_n;
reg    in1_2_TDATA_blk_n;
reg    in1_3_TDATA_blk_n;
reg    in1_4_TDATA_blk_n;
reg    in1_5_TDATA_blk_n;
reg    in1_6_TDATA_blk_n;
reg    in1_7_TDATA_blk_n;
reg    in1_8_TDATA_blk_n;
reg    in1_9_TDATA_blk_n;
reg    in1_10_TDATA_blk_n;
reg    in1_11_TDATA_blk_n;
reg    in1_12_TDATA_blk_n;
reg    in1_13_TDATA_blk_n;
reg    in1_14_TDATA_blk_n;
reg    in1_15_TDATA_blk_n;
reg    in2_0_TDATA_blk_n;
reg    in2_1_TDATA_blk_n;
reg    in2_2_TDATA_blk_n;
reg    in2_3_TDATA_blk_n;
reg    in2_4_TDATA_blk_n;
reg    in2_5_TDATA_blk_n;
reg    in2_6_TDATA_blk_n;
reg    in2_7_TDATA_blk_n;
reg    in2_8_TDATA_blk_n;
reg    in2_9_TDATA_blk_n;
reg    in2_10_TDATA_blk_n;
reg    in2_11_TDATA_blk_n;
reg    in2_12_TDATA_blk_n;
reg    in2_13_TDATA_blk_n;
reg    in2_14_TDATA_blk_n;
reg    in2_15_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [31:0] res_0_reg_309;
reg   [5:0] k_0_reg_322;
reg   [0:0] icmp_ln125_reg_531;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] k_fu_339_p2;
wire   [31:0] add_ln142_fu_441_p2;
reg   [31:0] add_ln142_reg_540;
wire   [31:0] add_ln142_1_fu_447_p2;
reg   [31:0] add_ln142_1_reg_545;
wire   [31:0] add_ln142_5_fu_465_p2;
reg   [31:0] add_ln142_5_reg_550;
wire   [31:0] add_ln142_7_fu_471_p2;
reg   [31:0] add_ln142_7_reg_555;
wire   [31:0] add_ln142_8_fu_477_p2;
reg   [31:0] add_ln142_8_reg_560;
wire   [31:0] add_ln142_12_fu_495_p2;
reg   [31:0] add_ln142_12_reg_565;
wire   [31:0] res_fu_525_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire  signed [31:0] mul_ln127_fu_345_p0;
wire  signed [31:0] mul_ln127_fu_345_p1;
wire  signed [31:0] mul_ln128_fu_351_p0;
wire  signed [31:0] mul_ln128_fu_351_p1;
wire  signed [31:0] mul_ln129_fu_357_p0;
wire  signed [31:0] mul_ln129_fu_357_p1;
wire  signed [31:0] mul_ln130_fu_363_p0;
wire  signed [31:0] mul_ln130_fu_363_p1;
wire  signed [31:0] mul_ln131_fu_369_p0;
wire  signed [31:0] mul_ln131_fu_369_p1;
wire  signed [31:0] mul_ln132_fu_375_p0;
wire  signed [31:0] mul_ln132_fu_375_p1;
wire  signed [31:0] mul_ln133_fu_381_p0;
wire  signed [31:0] mul_ln133_fu_381_p1;
wire  signed [31:0] mul_ln134_fu_387_p0;
wire  signed [31:0] mul_ln134_fu_387_p1;
wire  signed [31:0] mul_ln135_fu_393_p0;
wire  signed [31:0] mul_ln135_fu_393_p1;
wire  signed [31:0] mul_ln136_fu_399_p0;
wire  signed [31:0] mul_ln136_fu_399_p1;
wire  signed [31:0] mul_ln137_fu_405_p0;
wire  signed [31:0] mul_ln137_fu_405_p1;
wire  signed [31:0] mul_ln138_fu_411_p0;
wire  signed [31:0] mul_ln138_fu_411_p1;
wire  signed [31:0] mul_ln139_fu_417_p0;
wire  signed [31:0] mul_ln139_fu_417_p1;
wire  signed [31:0] mul_ln140_fu_423_p0;
wire  signed [31:0] mul_ln140_fu_423_p1;
wire  signed [31:0] mul_ln141_fu_429_p0;
wire  signed [31:0] mul_ln141_fu_429_p1;
wire  signed [31:0] mul_ln142_fu_435_p0;
wire  signed [31:0] mul_ln142_fu_435_p1;
wire   [31:0] mul_ln127_fu_345_p2;
wire   [31:0] mul_ln128_fu_351_p2;
wire   [31:0] mul_ln129_fu_357_p2;
wire   [31:0] mul_ln130_fu_363_p2;
wire   [31:0] mul_ln131_fu_369_p2;
wire   [31:0] mul_ln132_fu_375_p2;
wire   [31:0] mul_ln133_fu_381_p2;
wire   [31:0] mul_ln134_fu_387_p2;
wire   [31:0] add_ln142_4_fu_459_p2;
wire   [31:0] add_ln142_3_fu_453_p2;
wire   [31:0] mul_ln135_fu_393_p2;
wire   [31:0] mul_ln136_fu_399_p2;
wire   [31:0] mul_ln137_fu_405_p2;
wire   [31:0] mul_ln138_fu_411_p2;
wire   [31:0] mul_ln139_fu_417_p2;
wire   [31:0] mul_ln140_fu_423_p2;
wire   [31:0] mul_ln141_fu_429_p2;
wire   [31:0] mul_ln142_fu_435_p2;
wire   [31:0] add_ln142_11_fu_489_p2;
wire   [31:0] add_ln142_10_fu_483_p2;
wire   [31:0] add_ln142_2_fu_501_p2;
wire   [31:0] add_ln142_9_fu_510_p2;
wire   [31:0] add_ln142_13_fu_514_p2;
wire   [31:0] add_ln142_6_fu_505_p2;
wire   [31:0] add_ln142_14_fu_519_p2;
wire    regslice_both_out_r_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in1_0_U_apdone_blk;
wire   [31:0] in1_0_TDATA_int;
wire    in1_0_TVALID_int;
reg    in1_0_TREADY_int;
wire    regslice_both_in1_0_U_ack_in;
wire    regslice_both_in1_1_U_apdone_blk;
wire   [31:0] in1_1_TDATA_int;
wire    in1_1_TVALID_int;
reg    in1_1_TREADY_int;
wire    regslice_both_in1_1_U_ack_in;
wire    regslice_both_in1_2_U_apdone_blk;
wire   [31:0] in1_2_TDATA_int;
wire    in1_2_TVALID_int;
reg    in1_2_TREADY_int;
wire    regslice_both_in1_2_U_ack_in;
wire    regslice_both_in1_3_U_apdone_blk;
wire   [31:0] in1_3_TDATA_int;
wire    in1_3_TVALID_int;
reg    in1_3_TREADY_int;
wire    regslice_both_in1_3_U_ack_in;
wire    regslice_both_in1_4_U_apdone_blk;
wire   [31:0] in1_4_TDATA_int;
wire    in1_4_TVALID_int;
reg    in1_4_TREADY_int;
wire    regslice_both_in1_4_U_ack_in;
wire    regslice_both_in1_5_U_apdone_blk;
wire   [31:0] in1_5_TDATA_int;
wire    in1_5_TVALID_int;
reg    in1_5_TREADY_int;
wire    regslice_both_in1_5_U_ack_in;
wire    regslice_both_in1_6_U_apdone_blk;
wire   [31:0] in1_6_TDATA_int;
wire    in1_6_TVALID_int;
reg    in1_6_TREADY_int;
wire    regslice_both_in1_6_U_ack_in;
wire    regslice_both_in1_7_U_apdone_blk;
wire   [31:0] in1_7_TDATA_int;
wire    in1_7_TVALID_int;
reg    in1_7_TREADY_int;
wire    regslice_both_in1_7_U_ack_in;
wire    regslice_both_in1_8_U_apdone_blk;
wire   [31:0] in1_8_TDATA_int;
wire    in1_8_TVALID_int;
reg    in1_8_TREADY_int;
wire    regslice_both_in1_8_U_ack_in;
wire    regslice_both_in1_9_U_apdone_blk;
wire   [31:0] in1_9_TDATA_int;
wire    in1_9_TVALID_int;
reg    in1_9_TREADY_int;
wire    regslice_both_in1_9_U_ack_in;
wire    regslice_both_in1_10_U_apdone_blk;
wire   [31:0] in1_10_TDATA_int;
wire    in1_10_TVALID_int;
reg    in1_10_TREADY_int;
wire    regslice_both_in1_10_U_ack_in;
wire    regslice_both_in1_11_U_apdone_blk;
wire   [31:0] in1_11_TDATA_int;
wire    in1_11_TVALID_int;
reg    in1_11_TREADY_int;
wire    regslice_both_in1_11_U_ack_in;
wire    regslice_both_in1_12_U_apdone_blk;
wire   [31:0] in1_12_TDATA_int;
wire    in1_12_TVALID_int;
reg    in1_12_TREADY_int;
wire    regslice_both_in1_12_U_ack_in;
wire    regslice_both_in1_13_U_apdone_blk;
wire   [31:0] in1_13_TDATA_int;
wire    in1_13_TVALID_int;
reg    in1_13_TREADY_int;
wire    regslice_both_in1_13_U_ack_in;
wire    regslice_both_in1_14_U_apdone_blk;
wire   [31:0] in1_14_TDATA_int;
wire    in1_14_TVALID_int;
reg    in1_14_TREADY_int;
wire    regslice_both_in1_14_U_ack_in;
wire    regslice_both_in1_15_U_apdone_blk;
wire   [31:0] in1_15_TDATA_int;
wire    in1_15_TVALID_int;
reg    in1_15_TREADY_int;
wire    regslice_both_in1_15_U_ack_in;
wire    regslice_both_in2_0_U_apdone_blk;
wire   [31:0] in2_0_TDATA_int;
wire    in2_0_TVALID_int;
reg    in2_0_TREADY_int;
wire    regslice_both_in2_0_U_ack_in;
wire    regslice_both_in2_1_U_apdone_blk;
wire   [31:0] in2_1_TDATA_int;
wire    in2_1_TVALID_int;
reg    in2_1_TREADY_int;
wire    regslice_both_in2_1_U_ack_in;
wire    regslice_both_in2_2_U_apdone_blk;
wire   [31:0] in2_2_TDATA_int;
wire    in2_2_TVALID_int;
reg    in2_2_TREADY_int;
wire    regslice_both_in2_2_U_ack_in;
wire    regslice_both_in2_3_U_apdone_blk;
wire   [31:0] in2_3_TDATA_int;
wire    in2_3_TVALID_int;
reg    in2_3_TREADY_int;
wire    regslice_both_in2_3_U_ack_in;
wire    regslice_both_in2_4_U_apdone_blk;
wire   [31:0] in2_4_TDATA_int;
wire    in2_4_TVALID_int;
reg    in2_4_TREADY_int;
wire    regslice_both_in2_4_U_ack_in;
wire    regslice_both_in2_5_U_apdone_blk;
wire   [31:0] in2_5_TDATA_int;
wire    in2_5_TVALID_int;
reg    in2_5_TREADY_int;
wire    regslice_both_in2_5_U_ack_in;
wire    regslice_both_in2_6_U_apdone_blk;
wire   [31:0] in2_6_TDATA_int;
wire    in2_6_TVALID_int;
reg    in2_6_TREADY_int;
wire    regslice_both_in2_6_U_ack_in;
wire    regslice_both_in2_7_U_apdone_blk;
wire   [31:0] in2_7_TDATA_int;
wire    in2_7_TVALID_int;
reg    in2_7_TREADY_int;
wire    regslice_both_in2_7_U_ack_in;
wire    regslice_both_in2_8_U_apdone_blk;
wire   [31:0] in2_8_TDATA_int;
wire    in2_8_TVALID_int;
reg    in2_8_TREADY_int;
wire    regslice_both_in2_8_U_ack_in;
wire    regslice_both_in2_9_U_apdone_blk;
wire   [31:0] in2_9_TDATA_int;
wire    in2_9_TVALID_int;
reg    in2_9_TREADY_int;
wire    regslice_both_in2_9_U_ack_in;
wire    regslice_both_in2_10_U_apdone_blk;
wire   [31:0] in2_10_TDATA_int;
wire    in2_10_TVALID_int;
reg    in2_10_TREADY_int;
wire    regslice_both_in2_10_U_ack_in;
wire    regslice_both_in2_11_U_apdone_blk;
wire   [31:0] in2_11_TDATA_int;
wire    in2_11_TVALID_int;
reg    in2_11_TREADY_int;
wire    regslice_both_in2_11_U_ack_in;
wire    regslice_both_in2_12_U_apdone_blk;
wire   [31:0] in2_12_TDATA_int;
wire    in2_12_TVALID_int;
reg    in2_12_TREADY_int;
wire    regslice_both_in2_12_U_ack_in;
wire    regslice_both_in2_13_U_apdone_blk;
wire   [31:0] in2_13_TDATA_int;
wire    in2_13_TVALID_int;
reg    in2_13_TREADY_int;
wire    regslice_both_in2_13_U_ack_in;
wire    regslice_both_in2_14_U_apdone_blk;
wire   [31:0] in2_14_TDATA_int;
wire    in2_14_TVALID_int;
reg    in2_14_TREADY_int;
wire    regslice_both_in2_14_U_ack_in;
wire    regslice_both_in2_15_U_apdone_blk;
wire   [31:0] in2_15_TDATA_int;
wire    in2_15_TVALID_int;
reg    in2_15_TREADY_int;
wire    regslice_both_in2_15_U_ack_in;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_r_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_0_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_0_TDATA),
    .vld_in(in1_0_TVALID),
    .ack_in(regslice_both_in1_0_U_ack_in),
    .data_out(in1_0_TDATA_int),
    .vld_out(in1_0_TVALID_int),
    .ack_out(in1_0_TREADY_int),
    .apdone_blk(regslice_both_in1_0_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_1_TDATA),
    .vld_in(in1_1_TVALID),
    .ack_in(regslice_both_in1_1_U_ack_in),
    .data_out(in1_1_TDATA_int),
    .vld_out(in1_1_TVALID_int),
    .ack_out(in1_1_TREADY_int),
    .apdone_blk(regslice_both_in1_1_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_2_TDATA),
    .vld_in(in1_2_TVALID),
    .ack_in(regslice_both_in1_2_U_ack_in),
    .data_out(in1_2_TDATA_int),
    .vld_out(in1_2_TVALID_int),
    .ack_out(in1_2_TREADY_int),
    .apdone_blk(regslice_both_in1_2_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_3_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_3_TDATA),
    .vld_in(in1_3_TVALID),
    .ack_in(regslice_both_in1_3_U_ack_in),
    .data_out(in1_3_TDATA_int),
    .vld_out(in1_3_TVALID_int),
    .ack_out(in1_3_TREADY_int),
    .apdone_blk(regslice_both_in1_3_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_4_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_4_TDATA),
    .vld_in(in1_4_TVALID),
    .ack_in(regslice_both_in1_4_U_ack_in),
    .data_out(in1_4_TDATA_int),
    .vld_out(in1_4_TVALID_int),
    .ack_out(in1_4_TREADY_int),
    .apdone_blk(regslice_both_in1_4_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_5_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_5_TDATA),
    .vld_in(in1_5_TVALID),
    .ack_in(regslice_both_in1_5_U_ack_in),
    .data_out(in1_5_TDATA_int),
    .vld_out(in1_5_TVALID_int),
    .ack_out(in1_5_TREADY_int),
    .apdone_blk(regslice_both_in1_5_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_6_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_6_TDATA),
    .vld_in(in1_6_TVALID),
    .ack_in(regslice_both_in1_6_U_ack_in),
    .data_out(in1_6_TDATA_int),
    .vld_out(in1_6_TVALID_int),
    .ack_out(in1_6_TREADY_int),
    .apdone_blk(regslice_both_in1_6_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_7_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_7_TDATA),
    .vld_in(in1_7_TVALID),
    .ack_in(regslice_both_in1_7_U_ack_in),
    .data_out(in1_7_TDATA_int),
    .vld_out(in1_7_TVALID_int),
    .ack_out(in1_7_TREADY_int),
    .apdone_blk(regslice_both_in1_7_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_8_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_8_TDATA),
    .vld_in(in1_8_TVALID),
    .ack_in(regslice_both_in1_8_U_ack_in),
    .data_out(in1_8_TDATA_int),
    .vld_out(in1_8_TVALID_int),
    .ack_out(in1_8_TREADY_int),
    .apdone_blk(regslice_both_in1_8_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_9_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_9_TDATA),
    .vld_in(in1_9_TVALID),
    .ack_in(regslice_both_in1_9_U_ack_in),
    .data_out(in1_9_TDATA_int),
    .vld_out(in1_9_TVALID_int),
    .ack_out(in1_9_TREADY_int),
    .apdone_blk(regslice_both_in1_9_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_10_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_10_TDATA),
    .vld_in(in1_10_TVALID),
    .ack_in(regslice_both_in1_10_U_ack_in),
    .data_out(in1_10_TDATA_int),
    .vld_out(in1_10_TVALID_int),
    .ack_out(in1_10_TREADY_int),
    .apdone_blk(regslice_both_in1_10_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_11_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_11_TDATA),
    .vld_in(in1_11_TVALID),
    .ack_in(regslice_both_in1_11_U_ack_in),
    .data_out(in1_11_TDATA_int),
    .vld_out(in1_11_TVALID_int),
    .ack_out(in1_11_TREADY_int),
    .apdone_blk(regslice_both_in1_11_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_12_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_12_TDATA),
    .vld_in(in1_12_TVALID),
    .ack_in(regslice_both_in1_12_U_ack_in),
    .data_out(in1_12_TDATA_int),
    .vld_out(in1_12_TVALID_int),
    .ack_out(in1_12_TREADY_int),
    .apdone_blk(regslice_both_in1_12_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_13_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_13_TDATA),
    .vld_in(in1_13_TVALID),
    .ack_in(regslice_both_in1_13_U_ack_in),
    .data_out(in1_13_TDATA_int),
    .vld_out(in1_13_TVALID_int),
    .ack_out(in1_13_TREADY_int),
    .apdone_blk(regslice_both_in1_13_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_14_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_14_TDATA),
    .vld_in(in1_14_TVALID),
    .ack_in(regslice_both_in1_14_U_ack_in),
    .data_out(in1_14_TDATA_int),
    .vld_out(in1_14_TVALID_int),
    .ack_out(in1_14_TREADY_int),
    .apdone_blk(regslice_both_in1_14_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in1_15_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_15_TDATA),
    .vld_in(in1_15_TVALID),
    .ack_in(regslice_both_in1_15_U_ack_in),
    .data_out(in1_15_TDATA_int),
    .vld_out(in1_15_TVALID_int),
    .ack_out(in1_15_TREADY_int),
    .apdone_blk(regslice_both_in1_15_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_0_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_0_TDATA),
    .vld_in(in2_0_TVALID),
    .ack_in(regslice_both_in2_0_U_ack_in),
    .data_out(in2_0_TDATA_int),
    .vld_out(in2_0_TVALID_int),
    .ack_out(in2_0_TREADY_int),
    .apdone_blk(regslice_both_in2_0_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_1_TDATA),
    .vld_in(in2_1_TVALID),
    .ack_in(regslice_both_in2_1_U_ack_in),
    .data_out(in2_1_TDATA_int),
    .vld_out(in2_1_TVALID_int),
    .ack_out(in2_1_TREADY_int),
    .apdone_blk(regslice_both_in2_1_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_2_TDATA),
    .vld_in(in2_2_TVALID),
    .ack_in(regslice_both_in2_2_U_ack_in),
    .data_out(in2_2_TDATA_int),
    .vld_out(in2_2_TVALID_int),
    .ack_out(in2_2_TREADY_int),
    .apdone_blk(regslice_both_in2_2_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_3_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_3_TDATA),
    .vld_in(in2_3_TVALID),
    .ack_in(regslice_both_in2_3_U_ack_in),
    .data_out(in2_3_TDATA_int),
    .vld_out(in2_3_TVALID_int),
    .ack_out(in2_3_TREADY_int),
    .apdone_blk(regslice_both_in2_3_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_4_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_4_TDATA),
    .vld_in(in2_4_TVALID),
    .ack_in(regslice_both_in2_4_U_ack_in),
    .data_out(in2_4_TDATA_int),
    .vld_out(in2_4_TVALID_int),
    .ack_out(in2_4_TREADY_int),
    .apdone_blk(regslice_both_in2_4_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_5_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_5_TDATA),
    .vld_in(in2_5_TVALID),
    .ack_in(regslice_both_in2_5_U_ack_in),
    .data_out(in2_5_TDATA_int),
    .vld_out(in2_5_TVALID_int),
    .ack_out(in2_5_TREADY_int),
    .apdone_blk(regslice_both_in2_5_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_6_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_6_TDATA),
    .vld_in(in2_6_TVALID),
    .ack_in(regslice_both_in2_6_U_ack_in),
    .data_out(in2_6_TDATA_int),
    .vld_out(in2_6_TVALID_int),
    .ack_out(in2_6_TREADY_int),
    .apdone_blk(regslice_both_in2_6_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_7_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_7_TDATA),
    .vld_in(in2_7_TVALID),
    .ack_in(regslice_both_in2_7_U_ack_in),
    .data_out(in2_7_TDATA_int),
    .vld_out(in2_7_TVALID_int),
    .ack_out(in2_7_TREADY_int),
    .apdone_blk(regslice_both_in2_7_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_8_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_8_TDATA),
    .vld_in(in2_8_TVALID),
    .ack_in(regslice_both_in2_8_U_ack_in),
    .data_out(in2_8_TDATA_int),
    .vld_out(in2_8_TVALID_int),
    .ack_out(in2_8_TREADY_int),
    .apdone_blk(regslice_both_in2_8_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_9_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_9_TDATA),
    .vld_in(in2_9_TVALID),
    .ack_in(regslice_both_in2_9_U_ack_in),
    .data_out(in2_9_TDATA_int),
    .vld_out(in2_9_TVALID_int),
    .ack_out(in2_9_TREADY_int),
    .apdone_blk(regslice_both_in2_9_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_10_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_10_TDATA),
    .vld_in(in2_10_TVALID),
    .ack_in(regslice_both_in2_10_U_ack_in),
    .data_out(in2_10_TDATA_int),
    .vld_out(in2_10_TVALID_int),
    .ack_out(in2_10_TREADY_int),
    .apdone_blk(regslice_both_in2_10_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_11_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_11_TDATA),
    .vld_in(in2_11_TVALID),
    .ack_in(regslice_both_in2_11_U_ack_in),
    .data_out(in2_11_TDATA_int),
    .vld_out(in2_11_TVALID_int),
    .ack_out(in2_11_TREADY_int),
    .apdone_blk(regslice_both_in2_11_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_12_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_12_TDATA),
    .vld_in(in2_12_TVALID),
    .ack_in(regslice_both_in2_12_U_ack_in),
    .data_out(in2_12_TDATA_int),
    .vld_out(in2_12_TVALID_int),
    .ack_out(in2_12_TREADY_int),
    .apdone_blk(regslice_both_in2_12_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_13_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_13_TDATA),
    .vld_in(in2_13_TVALID),
    .ack_in(regslice_both_in2_13_U_ack_in),
    .data_out(in2_13_TDATA_int),
    .vld_out(in2_13_TVALID_int),
    .ack_out(in2_13_TREADY_int),
    .apdone_blk(regslice_both_in2_13_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_14_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_14_TDATA),
    .vld_in(in2_14_TVALID),
    .ack_in(regslice_both_in2_14_U_ack_in),
    .data_out(in2_14_TDATA_int),
    .vld_out(in2_14_TVALID_int),
    .ack_out(in2_14_TREADY_int),
    .apdone_blk(regslice_both_in2_14_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in2_15_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_15_TDATA),
    .vld_in(in2_15_TVALID),
    .ack_in(regslice_both_in2_15_U_ack_in),
    .data_out(in2_15_TDATA_int),
    .vld_out(in2_15_TVALID_int),
    .ack_out(in2_15_TREADY_int),
    .apdone_blk(regslice_both_in2_15_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_0_reg_309),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        k_0_reg_322 <= k_fu_339_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_322 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_reg_531 == 1'd0))) begin
        res_0_reg_309 <= res_fu_525_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        res_0_reg_309 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        add_ln142_12_reg_565 <= add_ln142_12_fu_495_p2;
        add_ln142_1_reg_545 <= add_ln142_1_fu_447_p2;
        add_ln142_5_reg_550 <= add_ln142_5_fu_465_p2;
        add_ln142_7_reg_555 <= add_ln142_7_fu_471_p2;
        add_ln142_8_reg_560 <= add_ln142_8_fu_477_p2;
        add_ln142_reg_540 <= add_ln142_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln125_reg_531 <= icmp_ln125_fu_333_p2;
    end
end

always @ (*) begin
    if ((icmp_ln125_fu_333_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_r_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_r_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_0_TDATA_blk_n = in1_0_TVALID_int;
    end else begin
        in1_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_0_U_ack_in == 1'b1) & (in1_0_TVALID == 1'b1))) begin
        in1_0_TREADY = 1'b1;
    end else begin
        in1_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_0_TREADY_int = 1'b1;
    end else begin
        in1_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_10_TDATA_blk_n = in1_10_TVALID_int;
    end else begin
        in1_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_10_U_ack_in == 1'b1) & (in1_10_TVALID == 1'b1))) begin
        in1_10_TREADY = 1'b1;
    end else begin
        in1_10_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_10_TREADY_int = 1'b1;
    end else begin
        in1_10_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_11_TDATA_blk_n = in1_11_TVALID_int;
    end else begin
        in1_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_11_U_ack_in == 1'b1) & (in1_11_TVALID == 1'b1))) begin
        in1_11_TREADY = 1'b1;
    end else begin
        in1_11_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_11_TREADY_int = 1'b1;
    end else begin
        in1_11_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_12_TDATA_blk_n = in1_12_TVALID_int;
    end else begin
        in1_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_12_U_ack_in == 1'b1) & (in1_12_TVALID == 1'b1))) begin
        in1_12_TREADY = 1'b1;
    end else begin
        in1_12_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_12_TREADY_int = 1'b1;
    end else begin
        in1_12_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_13_TDATA_blk_n = in1_13_TVALID_int;
    end else begin
        in1_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_13_U_ack_in == 1'b1) & (in1_13_TVALID == 1'b1))) begin
        in1_13_TREADY = 1'b1;
    end else begin
        in1_13_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_13_TREADY_int = 1'b1;
    end else begin
        in1_13_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_14_TDATA_blk_n = in1_14_TVALID_int;
    end else begin
        in1_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_14_U_ack_in == 1'b1) & (in1_14_TVALID == 1'b1))) begin
        in1_14_TREADY = 1'b1;
    end else begin
        in1_14_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_14_TREADY_int = 1'b1;
    end else begin
        in1_14_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_15_TDATA_blk_n = in1_15_TVALID_int;
    end else begin
        in1_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_15_U_ack_in == 1'b1) & (in1_15_TVALID == 1'b1))) begin
        in1_15_TREADY = 1'b1;
    end else begin
        in1_15_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_15_TREADY_int = 1'b1;
    end else begin
        in1_15_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_1_TDATA_blk_n = in1_1_TVALID_int;
    end else begin
        in1_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_1_U_ack_in == 1'b1) & (in1_1_TVALID == 1'b1))) begin
        in1_1_TREADY = 1'b1;
    end else begin
        in1_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_1_TREADY_int = 1'b1;
    end else begin
        in1_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_2_TDATA_blk_n = in1_2_TVALID_int;
    end else begin
        in1_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_2_U_ack_in == 1'b1) & (in1_2_TVALID == 1'b1))) begin
        in1_2_TREADY = 1'b1;
    end else begin
        in1_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_2_TREADY_int = 1'b1;
    end else begin
        in1_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_3_TDATA_blk_n = in1_3_TVALID_int;
    end else begin
        in1_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_3_U_ack_in == 1'b1) & (in1_3_TVALID == 1'b1))) begin
        in1_3_TREADY = 1'b1;
    end else begin
        in1_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_3_TREADY_int = 1'b1;
    end else begin
        in1_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_4_TDATA_blk_n = in1_4_TVALID_int;
    end else begin
        in1_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_4_U_ack_in == 1'b1) & (in1_4_TVALID == 1'b1))) begin
        in1_4_TREADY = 1'b1;
    end else begin
        in1_4_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_4_TREADY_int = 1'b1;
    end else begin
        in1_4_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_5_TDATA_blk_n = in1_5_TVALID_int;
    end else begin
        in1_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_5_U_ack_in == 1'b1) & (in1_5_TVALID == 1'b1))) begin
        in1_5_TREADY = 1'b1;
    end else begin
        in1_5_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_5_TREADY_int = 1'b1;
    end else begin
        in1_5_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_6_TDATA_blk_n = in1_6_TVALID_int;
    end else begin
        in1_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_6_U_ack_in == 1'b1) & (in1_6_TVALID == 1'b1))) begin
        in1_6_TREADY = 1'b1;
    end else begin
        in1_6_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_6_TREADY_int = 1'b1;
    end else begin
        in1_6_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_7_TDATA_blk_n = in1_7_TVALID_int;
    end else begin
        in1_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_7_U_ack_in == 1'b1) & (in1_7_TVALID == 1'b1))) begin
        in1_7_TREADY = 1'b1;
    end else begin
        in1_7_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_7_TREADY_int = 1'b1;
    end else begin
        in1_7_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_8_TDATA_blk_n = in1_8_TVALID_int;
    end else begin
        in1_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_8_U_ack_in == 1'b1) & (in1_8_TVALID == 1'b1))) begin
        in1_8_TREADY = 1'b1;
    end else begin
        in1_8_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_8_TREADY_int = 1'b1;
    end else begin
        in1_8_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_9_TDATA_blk_n = in1_9_TVALID_int;
    end else begin
        in1_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in1_9_U_ack_in == 1'b1) & (in1_9_TVALID == 1'b1))) begin
        in1_9_TREADY = 1'b1;
    end else begin
        in1_9_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in1_9_TREADY_int = 1'b1;
    end else begin
        in1_9_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_0_TDATA_blk_n = in2_0_TVALID_int;
    end else begin
        in2_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_0_U_ack_in == 1'b1) & (in2_0_TVALID == 1'b1))) begin
        in2_0_TREADY = 1'b1;
    end else begin
        in2_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_0_TREADY_int = 1'b1;
    end else begin
        in2_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_10_TDATA_blk_n = in2_10_TVALID_int;
    end else begin
        in2_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_10_U_ack_in == 1'b1) & (in2_10_TVALID == 1'b1))) begin
        in2_10_TREADY = 1'b1;
    end else begin
        in2_10_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_10_TREADY_int = 1'b1;
    end else begin
        in2_10_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_11_TDATA_blk_n = in2_11_TVALID_int;
    end else begin
        in2_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_11_U_ack_in == 1'b1) & (in2_11_TVALID == 1'b1))) begin
        in2_11_TREADY = 1'b1;
    end else begin
        in2_11_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_11_TREADY_int = 1'b1;
    end else begin
        in2_11_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_12_TDATA_blk_n = in2_12_TVALID_int;
    end else begin
        in2_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_12_U_ack_in == 1'b1) & (in2_12_TVALID == 1'b1))) begin
        in2_12_TREADY = 1'b1;
    end else begin
        in2_12_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_12_TREADY_int = 1'b1;
    end else begin
        in2_12_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_13_TDATA_blk_n = in2_13_TVALID_int;
    end else begin
        in2_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_13_U_ack_in == 1'b1) & (in2_13_TVALID == 1'b1))) begin
        in2_13_TREADY = 1'b1;
    end else begin
        in2_13_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_13_TREADY_int = 1'b1;
    end else begin
        in2_13_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_14_TDATA_blk_n = in2_14_TVALID_int;
    end else begin
        in2_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_14_U_ack_in == 1'b1) & (in2_14_TVALID == 1'b1))) begin
        in2_14_TREADY = 1'b1;
    end else begin
        in2_14_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_14_TREADY_int = 1'b1;
    end else begin
        in2_14_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_15_TDATA_blk_n = in2_15_TVALID_int;
    end else begin
        in2_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_15_U_ack_in == 1'b1) & (in2_15_TVALID == 1'b1))) begin
        in2_15_TREADY = 1'b1;
    end else begin
        in2_15_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_15_TREADY_int = 1'b1;
    end else begin
        in2_15_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_1_TDATA_blk_n = in2_1_TVALID_int;
    end else begin
        in2_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_1_U_ack_in == 1'b1) & (in2_1_TVALID == 1'b1))) begin
        in2_1_TREADY = 1'b1;
    end else begin
        in2_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_1_TREADY_int = 1'b1;
    end else begin
        in2_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_2_TDATA_blk_n = in2_2_TVALID_int;
    end else begin
        in2_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_2_TVALID == 1'b1) & (regslice_both_in2_2_U_ack_in == 1'b1))) begin
        in2_2_TREADY = 1'b1;
    end else begin
        in2_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_2_TREADY_int = 1'b1;
    end else begin
        in2_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_3_TDATA_blk_n = in2_3_TVALID_int;
    end else begin
        in2_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_3_TVALID == 1'b1) & (regslice_both_in2_3_U_ack_in == 1'b1))) begin
        in2_3_TREADY = 1'b1;
    end else begin
        in2_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_3_TREADY_int = 1'b1;
    end else begin
        in2_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_4_TDATA_blk_n = in2_4_TVALID_int;
    end else begin
        in2_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_4_TVALID == 1'b1) & (regslice_both_in2_4_U_ack_in == 1'b1))) begin
        in2_4_TREADY = 1'b1;
    end else begin
        in2_4_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_4_TREADY_int = 1'b1;
    end else begin
        in2_4_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_5_TDATA_blk_n = in2_5_TVALID_int;
    end else begin
        in2_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_5_TVALID == 1'b1) & (regslice_both_in2_5_U_ack_in == 1'b1))) begin
        in2_5_TREADY = 1'b1;
    end else begin
        in2_5_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_5_TREADY_int = 1'b1;
    end else begin
        in2_5_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_6_TDATA_blk_n = in2_6_TVALID_int;
    end else begin
        in2_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_6_TVALID == 1'b1) & (regslice_both_in2_6_U_ack_in == 1'b1))) begin
        in2_6_TREADY = 1'b1;
    end else begin
        in2_6_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_6_TREADY_int = 1'b1;
    end else begin
        in2_6_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_7_TDATA_blk_n = in2_7_TVALID_int;
    end else begin
        in2_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_7_TVALID == 1'b1) & (regslice_both_in2_7_U_ack_in == 1'b1))) begin
        in2_7_TREADY = 1'b1;
    end else begin
        in2_7_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_7_TREADY_int = 1'b1;
    end else begin
        in2_7_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_8_TDATA_blk_n = in2_8_TVALID_int;
    end else begin
        in2_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_8_TVALID == 1'b1) & (regslice_both_in2_8_U_ack_in == 1'b1))) begin
        in2_8_TREADY = 1'b1;
    end else begin
        in2_8_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_8_TREADY_int = 1'b1;
    end else begin
        in2_8_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_9_TDATA_blk_n = in2_9_TVALID_int;
    end else begin
        in2_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in2_9_U_ack_in == 1'b1) & (in2_9_TVALID == 1'b1))) begin
        in2_9_TREADY = 1'b1;
    end else begin
        in2_9_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln125_fu_333_p2 == 1'd0))) begin
        in2_9_TREADY_int = 1'b1;
    end else begin
        in2_9_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln125_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln125_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_r_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln142_10_fu_483_p2 = (mul_ln139_fu_417_p2 + mul_ln140_fu_423_p2);

assign add_ln142_11_fu_489_p2 = (mul_ln141_fu_429_p2 + mul_ln142_fu_435_p2);

assign add_ln142_12_fu_495_p2 = (add_ln142_11_fu_489_p2 + add_ln142_10_fu_483_p2);

assign add_ln142_13_fu_514_p2 = (add_ln142_12_reg_565 + add_ln142_9_fu_510_p2);

assign add_ln142_14_fu_519_p2 = (add_ln142_13_fu_514_p2 + add_ln142_6_fu_505_p2);

assign add_ln142_1_fu_447_p2 = (mul_ln129_fu_357_p2 + mul_ln130_fu_363_p2);

assign add_ln142_2_fu_501_p2 = (add_ln142_1_reg_545 + add_ln142_reg_540);

assign add_ln142_3_fu_453_p2 = (mul_ln131_fu_369_p2 + mul_ln132_fu_375_p2);

assign add_ln142_4_fu_459_p2 = (mul_ln133_fu_381_p2 + mul_ln134_fu_387_p2);

assign add_ln142_5_fu_465_p2 = (add_ln142_4_fu_459_p2 + add_ln142_3_fu_453_p2);

assign add_ln142_6_fu_505_p2 = (add_ln142_5_reg_550 + add_ln142_2_fu_501_p2);

assign add_ln142_7_fu_471_p2 = (mul_ln135_fu_393_p2 + mul_ln136_fu_399_p2);

assign add_ln142_8_fu_477_p2 = (mul_ln137_fu_405_p2 + mul_ln138_fu_411_p2);

assign add_ln142_9_fu_510_p2 = (add_ln142_8_reg_560 + add_ln142_7_reg_555);

assign add_ln142_fu_441_p2 = (mul_ln127_fu_345_p2 + mul_ln128_fu_351_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((in2_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((in2_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in2_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_15_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_14_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_13_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_12_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_11_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_10_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_9_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_8_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_7_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_6_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_5_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_4_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_3_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_2_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_1_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)) | ((in1_0_TVALID_int == 1'b0) & (icmp_ln125_fu_333_p2 == 1'd0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln125_fu_333_p2 = ((k_0_reg_322 == 6'd32) ? 1'b1 : 1'b0);

assign k_fu_339_p2 = (k_0_reg_322 + 6'd1);

assign mul_ln127_fu_345_p0 = in1_0_TDATA_int;

assign mul_ln127_fu_345_p1 = in2_0_TDATA_int;

assign mul_ln127_fu_345_p2 = ($signed(mul_ln127_fu_345_p0) * $signed(mul_ln127_fu_345_p1));

assign mul_ln128_fu_351_p0 = in1_1_TDATA_int;

assign mul_ln128_fu_351_p1 = in2_1_TDATA_int;

assign mul_ln128_fu_351_p2 = ($signed(mul_ln128_fu_351_p0) * $signed(mul_ln128_fu_351_p1));

assign mul_ln129_fu_357_p0 = in1_2_TDATA_int;

assign mul_ln129_fu_357_p1 = in2_2_TDATA_int;

assign mul_ln129_fu_357_p2 = ($signed(mul_ln129_fu_357_p0) * $signed(mul_ln129_fu_357_p1));

assign mul_ln130_fu_363_p0 = in1_3_TDATA_int;

assign mul_ln130_fu_363_p1 = in2_3_TDATA_int;

assign mul_ln130_fu_363_p2 = ($signed(mul_ln130_fu_363_p0) * $signed(mul_ln130_fu_363_p1));

assign mul_ln131_fu_369_p0 = in1_4_TDATA_int;

assign mul_ln131_fu_369_p1 = in2_4_TDATA_int;

assign mul_ln131_fu_369_p2 = ($signed(mul_ln131_fu_369_p0) * $signed(mul_ln131_fu_369_p1));

assign mul_ln132_fu_375_p0 = in1_5_TDATA_int;

assign mul_ln132_fu_375_p1 = in2_5_TDATA_int;

assign mul_ln132_fu_375_p2 = ($signed(mul_ln132_fu_375_p0) * $signed(mul_ln132_fu_375_p1));

assign mul_ln133_fu_381_p0 = in1_6_TDATA_int;

assign mul_ln133_fu_381_p1 = in2_6_TDATA_int;

assign mul_ln133_fu_381_p2 = ($signed(mul_ln133_fu_381_p0) * $signed(mul_ln133_fu_381_p1));

assign mul_ln134_fu_387_p0 = in1_7_TDATA_int;

assign mul_ln134_fu_387_p1 = in2_7_TDATA_int;

assign mul_ln134_fu_387_p2 = ($signed(mul_ln134_fu_387_p0) * $signed(mul_ln134_fu_387_p1));

assign mul_ln135_fu_393_p0 = in1_8_TDATA_int;

assign mul_ln135_fu_393_p1 = in2_8_TDATA_int;

assign mul_ln135_fu_393_p2 = ($signed(mul_ln135_fu_393_p0) * $signed(mul_ln135_fu_393_p1));

assign mul_ln136_fu_399_p0 = in1_9_TDATA_int;

assign mul_ln136_fu_399_p1 = in2_9_TDATA_int;

assign mul_ln136_fu_399_p2 = ($signed(mul_ln136_fu_399_p0) * $signed(mul_ln136_fu_399_p1));

assign mul_ln137_fu_405_p0 = in1_10_TDATA_int;

assign mul_ln137_fu_405_p1 = in2_10_TDATA_int;

assign mul_ln137_fu_405_p2 = ($signed(mul_ln137_fu_405_p0) * $signed(mul_ln137_fu_405_p1));

assign mul_ln138_fu_411_p0 = in1_11_TDATA_int;

assign mul_ln138_fu_411_p1 = in2_11_TDATA_int;

assign mul_ln138_fu_411_p2 = ($signed(mul_ln138_fu_411_p0) * $signed(mul_ln138_fu_411_p1));

assign mul_ln139_fu_417_p0 = in1_12_TDATA_int;

assign mul_ln139_fu_417_p1 = in2_12_TDATA_int;

assign mul_ln139_fu_417_p2 = ($signed(mul_ln139_fu_417_p0) * $signed(mul_ln139_fu_417_p1));

assign mul_ln140_fu_423_p0 = in1_13_TDATA_int;

assign mul_ln140_fu_423_p1 = in2_13_TDATA_int;

assign mul_ln140_fu_423_p2 = ($signed(mul_ln140_fu_423_p0) * $signed(mul_ln140_fu_423_p1));

assign mul_ln141_fu_429_p0 = in1_14_TDATA_int;

assign mul_ln141_fu_429_p1 = in2_14_TDATA_int;

assign mul_ln141_fu_429_p2 = ($signed(mul_ln141_fu_429_p0) * $signed(mul_ln141_fu_429_p1));

assign mul_ln142_fu_435_p0 = in1_15_TDATA_int;

assign mul_ln142_fu_435_p1 = in2_15_TDATA_int;

assign mul_ln142_fu_435_p2 = ($signed(mul_ln142_fu_435_p0) * $signed(mul_ln142_fu_435_p1));

assign out_r_TVALID = regslice_both_out_r_U_vld_out;

assign res_fu_525_p2 = (res_0_reg_309 + add_ln142_14_fu_519_p2);

endmodule //mmult_hw_pm
