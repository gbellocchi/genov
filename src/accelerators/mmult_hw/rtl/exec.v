// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_TDATA,
        in1_TVALID,
        in1_TREADY,
        in2_TDATA,
        in2_TVALID,
        in2_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1_TDATA;
input   in1_TVALID;
output   in1_TREADY;
input  [31:0] in2_TDATA;
input   in2_TVALID;
output   in2_TREADY;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_TREADY;
reg in2_TREADY;
reg out_r_TVALID;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln72_fu_78_p2;
reg    in2_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
wire   [9:0] k_fu_84_p2;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [31:0] result_fu_96_p2;
reg   [31:0] result_0_reg_55;
reg   [9:0] k_0_reg_67;
wire  signed [31:0] mul_ln75_fu_90_p0;
wire  signed [31:0] mul_ln75_fu_90_p1;
wire   [31:0] mul_ln75_fu_90_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_67 <= k_fu_84_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_67 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        result_0_reg_55 <= result_fu_96_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        result_0_reg_55 <= 32'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_TDATA_blk_n = in1_TVALID;
    end else begin
        in1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_TREADY = 1'b1;
    end else begin
        in1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in2_TDATA_blk_n = in2_TVALID;
    end else begin
        in2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in2_TREADY = 1'b1;
    end else begin
        in2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state2_io) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0))) & (icmp_ln72_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = (((icmp_ln72_fu_78_p2 == 1'd0) & (in2_TVALID == 1'b0)) | ((icmp_ln72_fu_78_p2 == 1'd0) & (in1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln72_fu_78_p2 == 1'd1) & (out_r_TREADY == 1'b0));
end

assign icmp_ln72_fu_78_p2 = ((k_0_reg_67 == 10'd512) ? 1'b1 : 1'b0);

assign k_fu_84_p2 = (k_0_reg_67 + 10'd1);

assign mul_ln75_fu_90_p0 = in1_TDATA;

assign mul_ln75_fu_90_p1 = in2_TDATA;

assign mul_ln75_fu_90_p2 = ($signed(mul_ln75_fu_90_p0) * $signed(mul_ln75_fu_90_p1));

assign out_r_TDATA = result_0_reg_55;

assign result_fu_96_p2 = (mul_ln75_fu_90_p2 + result_0_reg_55);

endmodule //exec
